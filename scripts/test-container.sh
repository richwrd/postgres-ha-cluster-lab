#!/bin/bash

# Script para testar containers Docker Compose
# Autor: Eduardo Richard

# Configura√ß√£o do arquivo Docker Compose
COMPOSE_FILE="${COMPOSE_FILE:-./docker-compose.etcd.yaml}"

echo "üîß Script de Teste de Containers"
echo "================================"

# Fun√ß√£o para exibir ajuda
show_help() {
    echo "Uso: $0 [OP√á√ÉO]"
    echo ""
    echo "OP√á√ïES:"
    echo "  build     - Apenas fazer o build das imagens"
    echo "  run       - Build e executar os containers"
    echo "  stop      - Parar os containers"
    echo "  clean     - Parar e remover containers/imagens"
    echo "  logs      - Mostrar logs dos containers"
    echo "  help      - Mostrar esta ajuda"
    echo ""
    echo "VARI√ÅVEIS DE AMBIENTE:"
    echo "  COMPOSE_FILE  - Arquivo docker-compose (padr√£o: $COMPOSE_FILE)"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 build                                    # Build padr√£o"
    echo "  COMPOSE_FILE=docker-compose.yaml $0 run     # Com arquivo espec√≠fico"
    echo "  $0 logs                                     # Ver logs"
    echo ""
}

# Fun√ß√£o para build
do_build() {
    echo "üèóÔ∏è  Fazendo build das imagens..."
    echo "üìÅ Arquivo: $COMPOSE_FILE"
    docker compose -f "$COMPOSE_FILE" build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build conclu√≠do com sucesso!"
        echo ""
        echo "üìã Imagens criadas:"
        docker images | grep "$(basename "$(dirname "$COMPOSE_FILE")")"
    else
        echo "‚ùå Erro no build!"
        exit 1
    fi
}

# Fun√ß√£o para executar
do_run() {
    echo "üöÄ Iniciando containers..."
    echo "üìÅ Arquivo: $COMPOSE_FILE"
    docker compose -f "$COMPOSE_FILE" up -d

    if [ $? -eq 0 ]; then
        echo "‚úÖ Containers iniciados com sucesso!"
        echo ""
        echo "üìã Status dos containers:"
        docker compose -f "$COMPOSE_FILE" ps
        echo ""
        echo "üìù Para ver os logs: $0 logs"
        echo "üõë Para parar: $0 stop"
    else
        echo "‚ùå Erro ao iniciar containers!"
        exit 1
    fi
}

# Fun√ß√£o para parar
do_stop() {
    echo "üõë Parando containers..."
    echo "üìÅ Arquivo: $COMPOSE_FILE"
    docker compose -f "$COMPOSE_FILE" down
    echo "‚úÖ Containers parados!"
}

# Fun√ß√£o para limpeza
do_clean() {
    echo "üßπ Limpando containers e imagens..."
    echo "üìÅ Arquivo: $COMPOSE_FILE"
    docker compose -f "$COMPOSE_FILE" down --rmi all --volumes
    echo "‚úÖ Limpeza conclu√≠da!"
}

# Fun√ß√£o para logs
do_logs() {
    echo "üìã Logs dos containers:"
    echo "========================"
    echo "üìÅ Arquivo: $COMPOSE_FILE"
    docker compose -f "$COMPOSE_FILE" logs -f
}

# Verificar se docker compose est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå docker n√£o est√° instalado!"
    exit 1
fi

if ! docker compose version &> /dev/null; then
    echo "‚ùå docker compose n√£o est√° dispon√≠vel!"
    exit 1
fi

# Verificar se o arquivo compose existe
if [ ! -f "$COMPOSE_FILE" ]; then
    echo "‚ùå Arquivo Docker Compose n√£o encontrado: $COMPOSE_FILE"
    exit 1
fi

# Processar argumentos
case "${1:-help}" in
    build)
        do_build
        ;;
    run)
        do_build
        do_run
        ;;
    stop)
        do_stop
        ;;
    clean)
        do_clean
        ;;
    logs)
        do_logs
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
