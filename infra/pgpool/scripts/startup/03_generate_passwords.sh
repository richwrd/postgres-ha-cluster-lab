#!/bin/sh
set -e

# Verifica se a vari√°vel HOME est√° definida para evitar erros
if [ -z "$HOME" ]; then
  echo "ERRO: A vari√°vel de ambiente HOME n√£o est√° definida." >&2
  exit 1
fi

echo "üîë Gerando arquivos de senha no diret√≥rio home do usu√°rio ($HOME)..."

# ------------------------------------------------------------------------------------
# Arquivo: .pgpass
# Prop√≥sito: Usado pelo pr√≥prio servi√ßo Pgpool-II para se conectar como um CLIENTE
#            aos n√≥s do PostgreSQL (backends) e realizar checagens de sa√∫de
#            (par√¢metro 'health_check_user') e de replica√ß√£o ('sr_check_user').
# ------------------------------------------------------------------------------------
echo "Gerando .pgpass para autentica√ß√£o do Pgpool-II nos backends PostgreSQL..."
echo "*:*:*:${PGPOOL_HEALTHCHECK_USER}:${PGPOOL_HEALTHCHECK_PASSWORD}" > "${HOME}/.pgpass"
echo "*:*:*:${PGPOOL_SR_CHECK_USER}:${PGPOOL_SR_CHECK_PASSWORD}" >> "${HOME}/.pgpass"

# ------------------------------------------------------------------------------------
# Arquivo: .pcppass
# Prop√≥sito: Usado pelas ferramentas CLIENTE do PCP (ex: pcp_node_count no healthcheck
#            do Docker) para se conectar √† porta de administra√ß√£o (9898) do Pgpool-II.
# ------------------------------------------------------------------------------------
echo "Gerando .pcppass para autentica√ß√£o dos clientes PCP no servi√ßo Pgpool-II..."
echo "*:9898:${PGPOOL_PCP_USER}:${PGPOOL_PCP_PASSWORD}" > "${HOME}/.pcppass"


# ------------------------------------------------------------------------------------
# Define permiss√µes seguras para os arquivos de senha.
# Apenas o propriet√°rio (usu√°rio 'pgpool') poder√° ler os arquivos.
# ------------------------------------------------------------------------------------
# --- Permiss√µes ---
chmod 600 "${HOME}/.pgpass" "${HOME}/.pcppass"

echo "‚úÖ Arquivos de senha criados com seguran√ßa em ${HOME}."