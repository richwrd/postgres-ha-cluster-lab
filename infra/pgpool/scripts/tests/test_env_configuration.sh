#!/bin/sh
# ------------------------------------------------------------------------------------
# SCRIPT DE TESTE: test_env_configuration.sh
# Prop√≥sito: Testar se a configura√ß√£o centralizada est√° funcionando corretamente
# ------------------------------------------------------------------------------------

set -e

echo "üß™ TESTE DE CONFIGURA√á√ÉO CENTRALIZADA"
echo "====================================="

# Fun√ß√£o para testar importa√ß√£o de bibliotecas
test_library_import() {
    local lib_name="$1"
    local lib_path="/opt/pgpool/bin/scripts/lib/${lib_name}"
    
    echo -n "üîç Testando importa√ß√£o de ${lib_name}... "
    
    if [ -f "$lib_path" ]; then
        if . "$lib_path" 2>/dev/null; then
            echo "‚úÖ OK"
            return 0
        else
            echo "‚ùå ERRO: Falha ao importar"
            return 1
        fi
    else
        echo "‚ùå ERRO: Arquivo n√£o encontrado"
        return 1
    fi
}

# Fun√ß√£o para testar vari√°veis de ambiente
test_environment_variables() {
    echo "üîç Testando vari√°veis de ambiente..."
    
    local errors=0
    
    # Testar vari√°veis cr√≠ticas
    for var in LIB_DIR LOG_FILE_FAILOVER PCP_USER PCP_HOST PCP_PORT PATRONI_API_ENDPOINTS; do
        if eval "[ -z \"\$$var\" ]"; then
            echo "‚ùå ERRO: Vari√°vel $var n√£o est√° definida"
            errors=$((errors + 1))
        else
            echo "‚úÖ $var: $(eval echo \"\$$var\")"
        fi
    done
    
    return $errors
}

# Fun√ß√£o para testar estrutura de diret√≥rios
test_directory_structure() {
    echo "üîç Testando estrutura de diret√≥rios..."
    
    local errors=0
    
    # Testar diret√≥rio de bibliotecas
    if [ ! -d "$LIB_DIR" ]; then
        echo "‚ùå ERRO: Diret√≥rio LIB_DIR n√£o existe: $LIB_DIR"
        errors=$((errors + 1))
    else
        echo "‚úÖ LIB_DIR existe: $LIB_DIR"
    fi
    
    # Testar diret√≥rio de log
    local log_dir=$(dirname "$LOG_FILE_FAILOVER")
    if [ ! -d "$log_dir" ]; then
        echo "‚ö†Ô∏è  AVISO: Diret√≥rio de log n√£o existe: $log_dir (ser√° criado automaticamente)"
    else
        echo "‚úÖ Diret√≥rio de log existe: $log_dir"
    fi
    
    return $errors
}

# Fun√ß√£o para testar fun√ß√µes das bibliotecas
test_library_functions() {
    echo "üîç Testando fun√ß√µes das bibliotecas..."
    
    local errors=0
    
    # Testar fun√ß√£o de logging
    if command -v log_metric >/dev/null 2>&1; then
        echo "‚úÖ Fun√ß√£o log_metric dispon√≠vel"
        log_metric "Teste de logging - configura√ß√£o centralizada funcionando"
    else
        echo "‚ùå ERRO: Fun√ß√£o log_metric n√£o encontrada"
        errors=$((errors + 1))
    fi
    
    # Testar fun√ß√£o de timestamp
    if command -v get_timestamp >/dev/null 2>&1; then
        echo "‚úÖ Fun√ß√£o get_timestamp dispon√≠vel"
        local timestamp=$(get_timestamp)
        echo "   Timestamp gerado: $timestamp"
    else
        echo "‚ùå ERRO: Fun√ß√£o get_timestamp n√£o encontrada"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# IN√çCIO DOS TESTES
echo "Iniciando testes de configura√ß√£o centralizada..."
echo ""

if [ ! -f "$ENV_PATH" ]; then
    ENV_PATH="/opt/pgpool/bin/scripts/lib/env.sh"
fi

# Importar configura√ß√£o centralizada
echo "üì¶ Importando configura√ß√£o centralizada de: $ENV_PATH"
if ! . "$ENV_PATH"; then
    echo "‚ùå FALHA CR√çTICA: N√£o foi poss√≠vel importar env.sh"
    exit 1
fi
echo "‚úÖ Configura√ß√£o centralizada importada com sucesso"
echo ""

# Executar testes
total_errors=0

# Teste 1: Vari√°veis de ambiente
test_environment_variables
total_errors=$((total_errors + $?))
echo ""

# Teste 2: Estrutura de diret√≥rios
test_directory_structure
total_errors=$((total_errors + $?))
echo ""

# Teste 3: Importa√ß√£o de bibliotecas
test_library_import "logging.sh"
test_library_import "patroni_operations.sh"
test_library_import "pgpool_operations.sh"
test_library_import "config_generator.sh"
echo ""

# Teste 4: Fun√ß√µes das bibliotecas
test_library_functions
total_errors=$((total_errors + $?))
echo ""

# Resultado final
echo "üéØ RESULTADO FINAL"
echo "=================="
if [ $total_errors -eq 0 ]; then
    echo "‚úÖ TODOS OS TESTES PASSARAM!"
    echo "   A configura√ß√£o centralizada est√° funcionando corretamente."
    exit 0
else
    echo "‚ùå $total_errors ERRO(S) ENCONTRADO(S)"
    echo "   Verifique as mensagens de erro acima."
    exit 1
fi
