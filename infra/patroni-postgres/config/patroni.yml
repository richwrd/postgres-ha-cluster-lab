# Universal Patroni Configuration Template
# by: Eduardo Richard

# ═══════════════════════════════════════════════════════════════════
# --- ESCOPO E NOMES ---
# O nome do cluster é lido do ambiente, com "pg-cluster" como padrão.
scope: ${PATRONI_SCOPE:-pg-cluster}

# Nome único deste nó no cluster (ex: patroni-postgres-1).
# Injetado via variável de ambiente PATRONI_NAME no docker-compose.yml.
name: ${PATRONI_NAME}

# ═══════════════════════════════════════════════════════════════════
# --- API REST ---
# Usada pelo patronictl para gerenciar o cluster e para health checks.
restapi:
  listen: "0.0.0.0:8008"

  connect_address: ${PATRONI_RESTAPI_CONNECT_ADDRESS}
  authentication:
    username: ${PATRONI_RESTAPI_USERNAME}
    password: ${PATRONI_RESTAPI_PASSWORD}

# ═══════════════════════════════════════════════════════════════════
# --- DISTRIBUTED CONSENSUS STORE (DCS) ---
# O cérebro do cluster que guarda o estado (quem é o líder, etc.).
# Aqui usamos o etcd, mas Patroni também suporta Consul e Zookeeper.

etcd3:
  hosts:
    - ${PATRONI_ETCD3_HOSTS}

# ═══════════════════════════════════════════════════════════════════
# --- CONFIGURAÇÃO DO POSTGRESQL ---
# Patroni gerencia o postgresql.conf com base nos parâmetros desta seção.
# ═══════════════════════════════════════════════════════════════════
postgresql:
  listen: "0.0.0.0:5432"
  connect_address: ${PATRONI_POSTGRESQL_CONNECT_ADDRESS}
  data_dir: /var/lib/postgresql/data/pgdata

  # Autenticação
  authentication:
    superuser:
      username: ${PATRONI_SUPERUSER_USERNAME}
      password: ${PATRONI_SUPERUSER_PASSWORD}
    replication:
      username: ${PATRONI_REPLICATION_USERNAME}
      password: ${PATRONI_REPLICATION_PASSWORD}

  # Parâmetros locais (usados no bootstrap inicial)
  # Cria usuários e configurações básicas que o Patroni precisa
  parameters:
    timezone: 'America/Sao_Paulo'

    # --- Segurança e Autenticação ---
    password_encryption: "md5"
    ssl: "off"  # Desabilita SSL para simplificar a replicação

    # --- Replicação e HA ---
    wal_level: replica
    hot_standby: "on"
    max_wal_senders: 10
    max_replication_slots: 10

    # --- Gerenciamento de WAL e Checkpoints ---
    archive_mode: "off" # Ideal manter "off" até integrar com uma ferramenta de backup como pgBackRest.
    archive_command: "/bin/true"
    

# ═══════════════════════════════════════════════════════════════════
# --- BOOTSTRAP ---
# Usado SOMENTE para criar o cluster do zero (no primeiro nó).
# ═══════════════════════════════════════════════════════════════════
bootstrap:
  dcs:
    ttl: 20                       # Recomendado para produção: 15-20s
    loop_wait: 5                  # Recomendado para produção: 5s (detecção rápida sem overhead)
    retry_timeout: 5              # Deve ser <= loop_wait
    maximum_lag_on_failover: 1048576
    postgresql:  
      parameters:
        timezone: 'America/Sao_Paulo'

        # --- Replicação e HA ---
        wal_level: replica
        hot_standby: "on"
        max_wal_senders: 10
        max_replication_slots: 10
        #synchronous_commit: "on"  # Ative se desejar replicação síncrona.
        #synchronous_standby_names: '*'  # Nomes dos nós síncronos.
        
        # --- Tuning de Performance ---
        # Ajustado para: 1 CPU / 4GB RAM por nó
        max_connections: 300                    # Aumentado para suportar burst via PgPool (200x4=800)
        max_locks_per_transaction: 64           # Padrão aumentado (32 pode ser insuficiente em cargas altas)
        max_worker_processes: 2                 # Permite paralelismo em consultas complexas
        max_parallel_workers: 2                 # Permite até 2 workers paralelos
        max_prepared_transactions: 0            # Desabilitado (ajuste conforme necessário)
        track_commit_timestamp: off             # Desabilitado para reduzir overhead

        shared_buffers: 1GB                     # ~25% da RAM (4GB × 0.25 = 1GB)
        effective_cache_size: 3GB               # ~75% da RAM (4GB × 0.75 = 3GB)
        work_mem: 4MB                           # Reduzido: 1GB / 300 conexões ≈ 3.4MB
        maintenance_work_mem: 256MB             # ~6% da RAM para operações de manutenção
        checkpoint_timeout: 15min               # Mantido
        checkpoint_completion_target: 0.9       # Mantido
        default_statistics_target: 100          # Mantido
        random_page_cost: 1.1                   # Mantido (SSD)
        effective_io_concurrency: 200           # Mantido (SSD)
        min_wal_size: 512MB                     # Reduzido de 2GB (pouca RAM disponível)
        max_wal_size: 2GB                       # Reduzido de 8GB (pouca RAM disponível)
        wal_buffers: 16MB                       # Mantido (padrão adequado)

        # --- Gerenciamento de WAL e Checkpoints ---
        archive_mode: "off" # Ideal manter "off" até integrar com uma ferramenta de backup como pgBackRest.
        archive_command: "/bin/true"

        # --- Segurança e Autenticação ---
        password_encryption: "md5"
        ssl: "off"  # Desabilita SSL para simplificar a replicação

  # Opções para o comando initdb.
  initdb:
    - encoding: "UTF8"
    - data-checksums
  
  # Regras de acesso iniciais que serão escritas no pg_hba.conf.
  pg_hba:
    - local all all trust
    - host all healthchecker 0.0.0.0/0 trust
    - host replication replicator 0.0.0.0/0 md5
    - host all all 0.0.0.0/0 md5
    
  # Script customizado para rodar APÓS o bootstrap inicial do cluster.
  post_bootstrap: /etc/patroni/scripts/post_bootstrap.sh

# ═══════════════════════════════════════════════════════════════════
# --- LOGS ---
# Simplificado para logar no stdout (saída padrão), ideal para contêineres.
# ═══════════════════════════════════════════════════════════════════
log:
  level: INFO
  format: "%(asctime)s %(levelname)s: %(message)s"

# ═══════════════════════════════════════════════════════════════════
# --- WATCHDOG ---
# ═══════════════════════════════════════════════════════════════════
watchdog:
  mode: off  # Desabilitado por padrão em contêineres

# ═══════════════════════════════════════════════════════════════════
# --- TAGS ---
# ═══════════════════════════════════════════════════════════════════
tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  nosync: false