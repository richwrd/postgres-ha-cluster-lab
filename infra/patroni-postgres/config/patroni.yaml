# TEMPLATE DE CONFIGURAÇÃO UNIVERSAL DO PATRONI
# by: Eduardo Richard

# ═══════════════════════════════════════════════════════════════════
# --- ESCOPO E NOMES ---
# O nome do cluster, será o mesmo para todos os nós.
scope: ${PATRONI_SCOPE:-pg-cluster}

# O nome deste nó específico. Será injetado pelo docker-compose.yml.
# Ex: patroni-postgres-1, patroni-postgres-2, etc.
name: ${PATRONI_NAME}


# ═══════════════════════════════════════════════════════════════════
# --- API REST ---
# Usada para o patronictl e health checks.
restapi:
  listen: "0.0.0.0:8008"
  connect_address: ${PATRONI_NAME}:8008
  authentication:
    username: ${RESTAPI_USER}
    password: ${RESTAPI_PASSWORD}

# ═══════════════════════════════════════════════════════════════════
# --- DISTRIBUTED CONSENSUS STORE (DCS) ---
# O cérebro do cluster.
# etcd:
#   hosts: etcd:2379
# A configuração do DCS agora é feita via variáveis de ambiente no docker-compose.yml.


# ═══════════════════════════════════════════════════════════════════
# --- BOOTSTRAP ---
# Esta seção é usada SOMENTE para criar um novo cluster do zero (no primeiro nó).
# Patroni é inteligente e usará os parâmetros da seção `postgresql` principal para o initdb.
bootstrap:
  dcs:
    # Tempo em segundos que o lock de líder é mantido no etcd.
    ttl: 30
    # Intervalo em segundos entre os ciclos de verificação do Patroni.
    loop_wait: 10
    retry_timeout: 10
    # Atraso máximo de replicação permitido para uma réplica ser promovida.
    maximum_lag_on_failover: 1048576
  # Comandos a serem executados durante o initdb.
  initdb:
    - encoding: "UTF8"
    - data-checksums: "on"
  # Regras de acesso iniciais.
  pg_hba:
    - host all all 0.0.0.0/0 scram-sha-256
    - host replication ${REPLICATION_USER} 0.0.0.0/0 scram-sha-256


# ═══════════════════════════════════════════════════════════════════
# --- CONFIGURAÇÃO DO POSTGRESQL ---
# Patroni gerencia o postgresql.conf com base nos parâmetros abaixo.
postgresql:
  listen: "0.0.0.0:5432"
  connect_address: ${PATRONI_NAME}:5432
  data_dir: /var/lib/postgresql/data/pgdata
  # As credenciais dos usuários do banco virão do arquivo .env.
  authentication:
    superuser:
      username: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
    replication:
      username: ${REPLICATION_USER}
      password: ${REPLICATION_PASSWORD}
  parameters:
    # --- Segurança e Autenticação ---
    password_encryption: "scram-sha-256" # Padrão moderno e seguro.

    # --- Replicação e HA ---
    wal_level: replica
    hot_standby: "on"
    max_wal_senders: 10
    max_replication_slots: 10
    # Aqui deixamos o Patroni gerenciar a replicação síncrona dinamicamente pela API.
    # synchronous_commit: "on"

    # --- Gerenciamento de WAL e Checkpoints ---
    # Usar slots de replicação é mais seguro que wal_keep_segments.
    # wal_keep_size: 512MB # Alternativa moderna ao wal_keep_segments
    archive_mode: "off" # Manter desligado até integrar o PgBackRest.
    archive_command: "/bin/true"

    # --- Tuning de Performance (Exemplos) ---
    shared_buffers: 1GB # Ajuste para 25% da memória do contêiner.
    effective_cache_size: 3GB # Ajuste para 75% da memória.
    work_mem: 64MB
    maintenance_work_mem: 256MB
    checkpoint_timeout: 15min
    checkpoint_completion_target: 0.9
    random_page_cost: 1.1 # Otimizado para SSDs.
    effective_io_concurrency: 200 # Para SSDs.

# --- LOGS ---
# Simplificado para logar apenas no stdout, o padrão para contêineres.
log:
  level: INFO
  format: "%(asctime)s %(levelname)s: %(message)s"