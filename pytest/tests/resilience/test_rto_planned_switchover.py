"""
Teste de RTO - Manuten√ß√£o Programada (Switchover Controlado)

Simula manuten√ß√£o programada onde a transi√ß√£o de lideran√ßa √© iniciada
proativamente atrav√©s do comando patronictl switchover. O objetivo √© medir
o tempo de indisponibilidade em uma troca controlada.

VERS√ÉO ASS√çNCRONA:
- Observa√ß√£o em tempo real de todos os n√≥s
- Detec√ß√£o precisa de eventos
- Medi√ß√£o de RTO em cen√°rio de manuten√ß√£o planejada
"""
import pytest
import asyncio
from src.core.patroni_manager import PatroniManager
from src.core.pgpool_manager import PgPoolManager
from src.core.config import config


@pytest.mark.rto
@pytest.mark.resilience
@pytest.mark.switchover
class TestRTOPlannedSwitchover:
    
    @pytest.mark.asyncio
    async def test_planned_maintenance_switchover(
        self,
        rto_collector,
        rto_writer,
        cluster_healthy,
        get_primary_node,
        pgpool_manager
    ):
        """
        Teste de Resili√™ncia (RTO) - Manuten√ß√£o Programada
        
        Procedimento (ASS√çNCRONO):
        1. Inicia observa√ß√£o de TODOS os n√≥s do cluster
        2. Identifica n√≥ prim√°rio atual
        3. Executa switchover controlado (patronictl switchover)
        4. Observa elei√ß√£o de novo prim√°rio
        5. Verifica disponibilidade do servi√ßo
        
        Objetivo: Medir downtime em manuten√ß√£o planejada
        Expectativa: RTO < 10s (switchover deve ser mais r√°pido que failover)
        
        Observa√ß√µes:
        - Switchover √© controlado, n√£o √© falha abrupta
        - Patroni coordena a transi√ß√£o de forma ordenada
        - Menos overhead que failover completo
        """
        patroni = PatroniManager()
        pgpool = PgPoolManager()
        
        print("\n" + "="*70)
        print("TESTE RTO - MANUTEN√á√ÉO PROGRAMADA (SWITCHOVER CONTROLADO)")
        print("="*70)
        
        # Prepara PgPool (anexa n√≥s DOWN se houver)
        attach_result = pgpool.attach_down_nodes()
        print("\nPreparando PgPool...")
        if attach_result["nodes_attached"]:
            print(f"‚úì N√≥s anexados ao PgPool: {attach_result['nodes_attached']}")
        if attach_result["nodes_failed"]:
            print(f"‚ö†Ô∏è  Falha ao anexar n√≥s: {attach_result['nodes_failed']}")
        
        # 0. Inicia observa√ß√£o ass√≠ncrona
        print("\n[0/5] üîç Iniciando observa√ß√£o do cluster...")
        await rto_collector.start_observation_switchover()
        print("‚úì Cluster sob observa√ß√£o (polling: 100ms)")
        
        # 1. Identifica prim√°rio
        print("\n[1/5] üéØ Identificando n√≥ prim√°rio...")
        initial_primary = get_primary_node()
        assert initial_primary, "Prim√°rio n√£o identificado"
        print(f"‚úì Prim√°rio atual: {initial_primary}")
        
        # 2. Prepara medi√ß√£o e executa switchover
        print(f"\n[2/5] üîÑ Executando switchover controlado...")
        
        metrics = rto_collector.start_measurement(
            "planned_maintenance_switchover",
            initial_primary,
            "switchover"
        )
        
        # Executa switchover (sem target, Patroni escolhe melhor r√©plica)
        success = patroni.switchover(force=True)
        assert success, "Falha ao executar switchover"
        print(f"‚úì Switchover iniciado em {initial_primary}")
    
        # 3. Aguarda novo prim√°rio
        print(f"\n[3/6] üó≥Ô∏è  Observando elei√ß√£o...")
        new_primary = await rto_collector.wait_for_new_primary(
            timeout=30,
            old_primary=initial_primary
        )
        assert new_primary, "Timeout: novo prim√°rio N√ÉO foi eleito!"
        print(f"‚úì Target eleito corretamente: {new_primary}")
        
        # 3. Aguarda SERVI√áO dispon√≠vel
        print(f"\n[3/5] üîå Verificando disponibilidade do servi√ßo...")
        service_ok = await rto_collector.wait_for_service_available(timeout=30)
        assert service_ok, "Servi√ßo PostgreSQL N√ÉO ficou dispon√≠vel!"
        print(f"‚úì Servi√ßo dispon√≠vel")
        
        # 5. Finaliza medi√ß√£o
        print(f"\n[5/5] üìä Finalizando medi√ß√£o...")
        rto_collector.finalize_metrics()
        
        # Para observa√ß√£o
        await rto_collector.stop_observation()
        
        # Obt√©m m√©tricas
        metrics = rto_collector.get_metrics()
        assert metrics, "M√©tricas n√£o foram coletadas"
        
        # Salva resultados
        rto_writer.write(metrics)
        
        # Exibe resultados
        self._print_rto_metrics(metrics)
        
        # Exibe eventos detectados
        print(rto_collector.get_events_summary())

        # Valida SLA (switchover deve ser mais r√°pido)
        self._validate_sla_rto(metrics)
        
        # Aguarda estabiliza√ß√£o
        await asyncio.sleep(3)
        print("\n‚úì Teste conclu√≠do")
    
    def _print_rto_metrics(self, metrics):
        """Exibe m√©tricas formatadas para switchover controlado"""
        print("\n" + "="*70)
        print("M√âTRICAS DE RTO - SWITCHOVER CONTROLADO")
        print("="*70)
        print(f"Test Case:         {metrics.test_case}")
        print(f"Tipo de opera√ß√£o:  {metrics.failure_type}")
        print(f"Prim√°rio original: {metrics.failed_node}")
        print(f"Novo prim√°rio:     {metrics.new_primary_node}")
        print("-"*70)
        print("FASES DO SWITCHOVER:")
        print(f"  1. In√≠cio:       {metrics.failure_injected_at}")
        print(f"  2. Novo prim√°rio eleito: {metrics.new_primary_elected_at}")
        print(f"  3. Servi√ßo dispon√≠vel:   {metrics.service_restored_at}")
        print("-"*70)
        print(f"DOWNTIME TOTAL:    {metrics.total_rto:8.3f}s")
        print("="*70)

    def _validate_sla_rto(self, metrics):
        """Valida SLA espec√≠fico para switchover (mais rigoroso)"""
        
        print(f"\n{'='*70}")
        print("VALIDA√á√ÉO DE SLA - MANUTEN√á√ÉO PROGRAMADA")
        print("="*70)
        
        # Switchover deve ser mais r√°pido que failover
        sla_target = 10.0  # segundos (mais rigoroso que failover)
        sla_passed = metrics.total_rto < sla_target
        
        print(f"Target RTO:        < {sla_target}s (switchover controlado)")
        print(f"RTO Medido:        {metrics.total_rto:.3f}s")
        print(f"Status:            {'‚úÖ PASSOU' if sla_passed else '‚ö†Ô∏è  EXCEDEU'}")
        
        if sla_passed:
            margin = sla_target - metrics.total_rto
            print(f"Margem:            {margin:.3f}s ({margin/sla_target*100:.1f}%)")
        else:
            exceeded = metrics.total_rto - sla_target
            print(f"Excedeu:           +{exceeded:.3f}s ({exceeded/sla_target*100:.1f}%)")
        
        print("="*70)
        
        # Apenas exibe resultado, n√£o falha o teste
        if sla_passed:
            print(f"\n‚úÖ RTO dentro do target: {metrics.total_rto:.3f}s (target: <{sla_target}s)")
        else:
            print(f"\n‚ö†Ô∏è  RTO acima do target: {metrics.total_rto:.3f}s (target: <{sla_target}s)")
            print("   ‚Üí Teste continuou para coleta de dados")
