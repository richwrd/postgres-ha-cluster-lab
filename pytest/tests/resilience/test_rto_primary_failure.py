"""
Teste de RTO - Falha do N√≥ Prim√°rio

Simula falha completa do n√≥ prim√°rio e mede tempo de recupera√ß√£o.

VERS√ÉO ASS√çNCRONA:
- Observa√ß√£o em tempo real de todos os n√≥s
- Zero sleeps arbitr√°rios
- Detec√ß√£o precisa de eventos
- Medi√ß√£o confi√°vel para SLA de 99,99% (RTO < 60s)
"""
import pytest
import asyncio
from src.core.docker_manager import DockerManager
from src.core.config import config


@pytest.mark.rto
@pytest.mark.resilience
class TestRTOPrimaryFailure:
    
    @pytest.mark.asyncio
    async def test_primary_node_complete_failure(
        self,
        rto_collector,
        rto_writer,
        cluster_healthy,
        get_primary_node,
        pgpool_manager
    ):
        """
        Teste de Resili√™ncia (RTO)
        
        Procedimento (ASS√çNCRONO):
        1. Inicia observa√ß√£o de TODOS os n√≥s do cluster
        2. Identifica n√≥ prim√°rio
        3. Para o container (docker stop)
        4. Observa quando R√âPLICAS detectam a falha
        5. Observa elei√ß√£o de novo prim√°rio
        6. Verifica disponibilidade do servi√ßo
        
        SLA: RTO < 60 segundos (para 99,99% uptime)
        
        Observa√ß√µes:
        - Sem sleeps arbitr√°rios
        - Polling de 100ms em todos os n√≥s
        - Detec√ß√£o real de eventos via API Patroni
        """
        docker = DockerManager()
        
        print("\n" + "="*70)
        print("TESTE RTO - FALHA COMPLETA DO N√ì PRIM√ÅRIO (ASYNC)")
        print("="*70)
        
        # 0. Inicia observa√ß√£o ass√≠ncrona
        print("\n[0/6] üîç Iniciando observa√ß√£o do cluster...")
        await rto_collector.start_observation()
        print("‚úì Cluster sob observa√ß√£o (polling: 100ms)")
        
        # Aguarda estabiliza√ß√£o
        await asyncio.sleep(0.3)
        
        # 1. Identifica prim√°rio
        print("\n[1/6] üéØ Identificando n√≥ prim√°rio...")
        initial_primary = get_primary_node()
        assert initial_primary, "Prim√°rio n√£o identificado"
        print(f"‚úì Prim√°rio: {initial_primary}")
        
        # 2. Prepara medi√ß√£o e injeta falha
        print(f"\n[2/6] üí• Injetando falha: parando {initial_primary}...")
        
        metrics = rto_collector.start_measurement(
            "primary_complete_failure",
            initial_primary,
            "stop"
        )
        
        # Para container (falha catastr√≥fica)
        success = docker.stop_container(initial_primary)
        assert success, "Falha ao parar container"
        print(f"‚úì Container {initial_primary} parado")
        
        # 3. Aguarda DETEC√á√ÉO real pelos n√≥s restantes
        print(f"\n[3/6] üëÅÔ∏è  Observando detec√ß√£o da falha pelas r√©plicas...")
        detected = await rto_collector.wait_for_failure_detection(timeout=30)
        assert detected, "Falha N√ÉO foi detectada pelas r√©plicas!"
        
        # 4. Aguarda ELEI√á√ÉO de novo prim√°rio
        print(f"\n[4/6] üó≥Ô∏è  Observando elei√ß√£o de novo prim√°rio...")
        new_primary = await rto_collector.wait_for_new_primary(
            timeout=60,
            old_primary=initial_primary
        )
        assert new_primary, "Timeout: novo prim√°rio N√ÉO foi eleito!"
        assert new_primary != initial_primary, "Prim√°rio n√£o mudou!"
        
        # 5. Aguarda SERVI√áO dispon√≠vel
        print(f"\n[5/6] üîå Verificando disponibilidade do servi√ßo...")
        service_ok = await rto_collector.wait_for_service_available(timeout=60)
        assert service_ok, "Servi√ßo PostgreSQL N√ÉO ficou dispon√≠vel!"
        
        # 6. Finaliza medi√ß√£o
        print(f"\n[6/6] üìä Finalizando medi√ß√£o...")
        rto_collector.finalize_metrics()
        
        # Para observa√ß√£o
        await rto_collector.stop_observation()
        
        # Obt√©m m√©tricas
        metrics = rto_collector.get_metrics()
        assert metrics, "M√©tricas n√£o foram coletadas"
        
        # Salva resultados
        rto_writer.write(metrics)
        
        # Exibe resultados
        self._print_rto_metrics(metrics)
        
        # Exibe eventos detectados
        print(rto_collector.get_events_summary())

        # Valida SLA
        self._validate_sla_rto(metrics)
        
        # Cleanup: reinicia o container e re-anexa o n√≥ ao PgPool via PCP
        print(f"\n[Cleanup] üîÑ Reiniciando {initial_primary}...")
        docker.start_container(initial_primary)

        # Aguarda container subir
        await asyncio.sleep(2)

        # Re-anexa n√≥s ao PgPool
        pgpool_manager.attach_down_nodes()
        
        # Aguarda estabiliza√ß√£o (pode usar um pouco de tempo aqui, n√£o √© medido)
        await asyncio.sleep(5)
        print("‚úì Cleanup conclu√≠do")
    
    
    def _print_rto_metrics(self, metrics):
        """Exibe m√©tricas formatadas com detalhamento"""
        print("\n" + "="*70)
        print("M√âTRICAS DE RTO (MEDI√á√ÉO ASS√çNCRONA)")
        print("="*70)
        print(f"Test Case:         {metrics.test_case}")
        print(f"Tipo de falha:     {metrics.failure_type}")
        print(f"N√≥ que falhou:     {metrics.failed_node}")
        print(f"Novo prim√°rio:     {metrics.new_primary_node}")
        print("-"*70)
        print("TEMPOS PARCIAIS:")
        print(f"  1. Detec√ß√£o:     {metrics.detection_time:8.3f}s  (cluster percebe falha)")
        print(f"  2. Elei√ß√£o:      {metrics.election_time:8.3f}s  (novo leader eleito)")
        print(f"  3. Restaura√ß√£o:  {metrics.restoration_time:8.3f}s  (servi√ßo dispon√≠vel)")
        print("-"*70)
        print(f"RTO TOTAL:         {metrics.total_rto:8.3f}s")
        print("="*70)

    def _validate_sla_rto(self, metrics):
        """Valida SLA e exibe resultados sem interromper o teste"""
        
        print(f"\n{'='*70}")
        print("VALIDA√á√ÉO DE SLA")
        print("="*70)
        
        sla_target = 60.0  # segundos
        sla_passed = metrics.total_rto < sla_target
        
        print(f"Target RTO:        < {sla_target}s (para 99.99% uptime)")
        print(f"RTO Medido:        {metrics.total_rto:.3f}s")
        print(f"Status:            {'‚úÖ PASSOU' if sla_passed else '‚ö†Ô∏è  EXCEDEU'}")
        
        if sla_passed:
            margin = sla_target - metrics.total_rto
            print(f"Margem:            {margin:.3f}s ({margin/sla_target*100:.1f}%)")
        else:
            exceeded = metrics.total_rto - sla_target
            print(f"Excedeu:           +{exceeded:.3f}s ({exceeded/sla_target*100:.1f}%)")
        
        print("="*70)
        
        # Apenas exibe resultado, n√£o falha o teste
        if sla_passed:
            print(f"\n‚úÖ RTO dentro do target: {metrics.total_rto:.3f}s (target: <{sla_target}s)")
        else:
            print(f"\n‚ö†Ô∏è  RTO acima do target: {metrics.total_rto:.3f}s (target: <{sla_target}s)")
            print("   ‚Üí Teste continuou para coleta de dados")